Statement stmt = conn.createstatement();

/////1.1 Create Table/////
//Create table for Category
stmt.executeUpdate("CREATE TABLE Category" + "(cID INTEGER, cName CHAR(20),PRIMARY KEY (cID),"
+ "CONSTRAINT Check_cID CHECK (cID >= 1 AND cID <= 9)");

//Create table for Manufacturer
stmt.executeUpdate("CREATE TABLE Manufacturer" +
"(mID INTEGER, mName CHAR(20), mAddress CHAR(50), mPhoneNumber INTEGER, PRIMARY KEY (mID),"
+ "CONSTRAINT Check_mID CHECK (mID >= 1 AND mID <= 99),"
+ "CONSTRAINT Check_mPhoneNumber CHECK (mPhoneNumber >= 10000000 AND mPhoneNumber<= 99999999)");

//Create table for Part
stmt.executeUpdate("CREATE TABLE Part" + "(pID INTEGER, pName CHAR(20), pPrice INTEGER, mID INTEGER, cID INTEGER, pWarrantyPeriod INTEGER, pAvailableQuantity INTEGER, PRIMARY KEY (pID),"
+ "CONSTRAINT Check_pID CHECK  (pID >= 1 AND pID <= 999),"
+ "CONSTRAINT Check_pPrice CHECK  (pPrice >= 1 AND pPrice <= 99999),"
+ "CONSTRAINT Check_mID	CHECK  (mID >= 1 AND mID <= 99),"
+ "CONSTRAINT Check_cID	CHECK  (cID >= 1 AND cID <= 9),"
+ "CONSTRAINT Check_pWarrantyPeriod	CHECK  (pWarrantyPeriod >= 1 AND pWarrantyPeriod <= 99),"
+ "CONSTRAINT Check_pAvailableQuantity	CHECK  (pAvailableQuantity >= 1 AND pAvailableQuantity <= 99)");

//Create table for Salesperson
stmt.executeUpdate("CREATE TABLE Salesperson" + "(sID INTEGER, sName CHAR(20), sAddress CHAR(50), sPhoneNumber INTEGER, sExperience INTEGER, PRIMARY KEY (sID),"
+ "CONSTRAINT Check_sID CHECK  (sID >= 1 AND sID <= 99),"
+ "CONSTRAINT Check_sPhoneNumber CHECK (sPhoneNumber >= 10000000 AND sPhoneNumber<= 99999999),"
+ "CONSTRAINT Check_sExperience	CHECK  (sExperience >= 1 AND sExperience <= 9)");

//Create table for TransactionRecords
stmt.executeUpdate("CREATE TABLE TransactionRecords" + "(tID INTEGER, pID INTEGER, sID INTEGER, tDate DATE NOT NULL, PRIMARY KEY (tID),"
+ "CONSTRAINT Check_tID CHECK  (tID >= 1 AND tID <= 9999),"
+ "CONSTRAINT Check_pID	CHECK  (pID >= 1 AND pID <= 999),"
+ "CONSTRAINT Check_sID	CHECK  (sID >= 1 AND sID <= 99),");


/////1.2 Delete Tables/////
//Drop table Category
stmt.executeUpdate("DROP TABLE Category");

//Drop table Manufacturer
stmt.executeUpdate("DROP TABLE Manufacturer");

//Drop table Part
stmt.executeUpdate("DROP TABLE Part");

//Drop table Salesperson
stmt.executeUpdate("DROP TABLE Salesperson");

//Drop table TransactionRecords
stmt.executeUpdate("DROP TABLE TransactionRecords");


/////1.3 Load from datafile/////



/////1.4 Show no. of records in each table/////
int countC = stmt.executeUpdate("SELECT  COUNT(*) FROM Category");
int countM = stmt.executeUpdate("SELECT  COUNT(*) FROM Manufacturer");
int countP = stmt.executeUpdate("SELECT  COUNT(*) FROM Part");
int countS = stmt.executeUpdate("SELECT  COUNT(*) FROM Salesperson");
int countT = stmt.executeUpdate("SELECT  COUNT(*) FROM TransactionRecords");

System.out.println(
"Category: " + countC + "\n" +
"Manufacturer: " + countM + "\n" +
"Part: " + countP + "\n" +
"Salesperson: " + countS + "\n" +
"TransactionRecords: " + countT);



/////Salesperson/////
//2.1.1a Search by part name
String Name1 = "SELECT P.pID, P.pName, M.mName, C.cName, P.pAvailableQuantity,P.pWarrantyPeriod, P.pPrice FROM Part P, Manufacturer M, Category C"
+ "WHERE P.pName LIKE '%Part_name_insert%'";
//2.1.1b Search by Manufacturer name
String Name2 = "SELECT P.pID, P.pName, M.mName, C.cName, P.pAvailableQuantity,P.pWarrantyPeriod, P.pPrice FROM Part P, Manufacturer M, Category C"
+ "WHERE M.mName LIKE '%Manufacturer_name_insert%'";
//2.1.2a Order by ASC
String OrderA = "ORDER BY P.pPrice ASC";
//2.1.2b Order by DESC
String OrderB = "ORDER BY P.pPrice DESC";

#Conditional resultset based on selection
//If 1a,2a
ResultSet rs = stmt.executeQuery(Name1 + " " + OrderA)
//If 1a,2b
ResultSet rs = stmt.executeQuery(Name1 + " " + OrderB)
//If 1b,2a
ResultSet rs = stmt.executeQuery(Name2 + " " + OrderA)
//If 1b,2b
ResultSet rs = stmt.executeQuery(Name2 + " " + OrderB)

//2.2 Sale of part
int availQty = stmt.executeUpdate("SELECT pAvailableQuantity FROM Part" 
+ "WHERE '%Part_id_insert%' = pID AND pAvailableQuantity > 0");
//if NULL result, return "part not available", 
//ELSE Update TransactionRecords
stmt.executeUpdate("INSERT INTO TransactionRecords (pID, sID, tDate)" 
+ "VALUES('%Part_ID_insert%', '%Salesperson_ID_insert%', GETDATE())");
//Update pAvailableQuantity
stmt.executeUpdate("UPDATE Part SET pAvailableQuantity = pAvailableQuantity - 1"
+ "WHERE pID = '%Part_ID_insert%'");



/////Manager/////
//3.1Count no. of transaction records by given range
String tCount = "SELECT sID, sName, sExperience, COUNT(*) AS NumberOfTransaction FROM Salesperson"
+ "WHERE sExperience BETWEEN '%Lower_input%' AND '%Upper_input%'";

ResultSet rs_tCount = stmt.executeUpdate(tCount)

//3.2Manufacturer Sales Value
String mSort = "SELECT M.mID, M.mName, SUM(P.pPrice) AS TotalSalesValue FROM Manufacturer M, Part P, TransactionRecords T"
+ "WHERE M.mID = P.mID AND P.pID = T.pID"
+ "GROUP BY M.mName ORDER BY TotalSalesValue DESC";

ResultSet rs_mSort = stmt.executeUpdate(mSort)

//3.3N popular parts
String popParts = "SELECT P.pID, P.pName, COUNT(*) AS TransactionCount FROM Part P, TransactionRecords T"
+ "WHERE P.pID = T.pID ORDER BY NoOfTransaction DESC"
+ "LIMIT '%Number_input%'";

ResultSet rs_popParts = stmt.executeUpdate(popParts)
